apply plugin: 'android'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':OutSystems:platforms:android:CordovaLib')
    compile project(':AndroidUniversalImageLoaderLib')
    compile project(':MobileECT')
    compile 'com.android.support:appcompat-v7:19.0.+'
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.0.0'


    defaultConfig{

        applicationId "com.yesco.android"

        if (project.hasProperty('APPLICATION_ID') && !((String)APPLICATION_ID).isEmpty()) {
            applicationId APPLICATION_ID
        }

        if (project.hasProperty('APPLICATION_VERSION') && !((String)APPLICATION_VERSION).isEmpty()){
            versionName APPLICATION_VERSION
        }

        if (project.hasProperty('APPLICATION_CODE') && !((String)APPLICATION_CODE).isEmpty()){
            versionCode APPLICATION_CODE.toInteger()
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }


    buildTypes {

        if( project.hasProperty('OUTPUT_DIR') && !((String)OUTPUT_DIR).isEmpty()){

            // this is used to alter output directory and file name. If you don't need it
            // you can safely comment it out.
            applicationVariants.all { variant ->

                variant.outputs.each { output ->
                    def file = output.outputFile

                    String parent = file.parent
                     if ( new File( (String)OUTPUT_DIR ).exists() ) {
                         parent = OUTPUT_DIR
                     }

		            if( project.hasProperty('APPLICATION_NAME') && !((String)APPLICATION_NAME).isEmpty()){
                        output.outputFile = new File(
                                parent,
                                (String)(APPLICATION_NAME + "-" + defaultConfig.versionName + ".apk")
                        )
                    }
                    else{
                        output.outputFile = new File(
                                parent,
                                (String)("OutsystemsNow.apk")
                        )
                    }

                }
            }
        }

    }

}
